@implements IDisposable

@if (CurrentTask?.Exception != null && ErrorContent != null)
{
    @ErrorContent(CurrentTask)
}
else if (CurrentTask != null && _loadingFragment != null)
{
    @_loadingFragment
}
<div style="@(((CurrentTask?.Exception != null && ErrorContent == null) ||
              CurrentTask == null) ? string.Empty : CONTENT_HIDDEN)">
    @ChildContent
</div>

@code {
    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string Context { get; set; }

    [Parameter] public Type TemplateType { get; set; } = Loading.DefaultTemplateType;

    private ITaskStatus CurrentTask { get; set; }

    private LoadingIndicatorTemplateBase _template;

    private RenderFragment _loadingFragment;

    private Action<ITaskStatus> HandleTaskProgressChangedEvent => new Action<ITaskStatus>((ITaskStatus task) =>
    {
        CurrentTask = task;
        if (_template != null)
        {
            _template.CurrentTask = task;

            InvokeAsync(() =>
       {
           _template.CallStateHasChanged();
   //StateHasChanged();
});


        }
        InvokeAsync(() =>
  {
                    StateHasChanged();
                });
    });

    protected override void OnInitialized()
    {
        Loading.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        _loadingFragment = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, TemplateType);
            builder.AddComponentReferenceCapture(1, inst =>
            {
                _template = (LoadingIndicatorTemplateBase)inst;
                _template.CurrentTask = CurrentTask;
            });
            builder.CloseComponent();
        });
    }

    public void Dispose()
    {
        Loading.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }
}

#pragma checksum "D:\31-10-BlazorApp_Demo_ZobiWebSolutions\BlazorApp_Demo_ZobiWebSolutions\Blazor.LoadingIndicator\Indicator.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dea60e54ae25505b4ec0d72e2ceedb7f9382398e"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blazor.LoadingIndicator
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    public class Indicator : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 16 "D:\31-10-BlazorApp_Demo_ZobiWebSolutions\BlazorApp_Demo_ZobiWebSolutions\Blazor.LoadingIndicator\Indicator.razor"
       
    private const string CONTENT_HIDDEN = "display: none;";

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment<ITaskStatus> ErrorContent { get; set; }

    [Parameter] public string Context { get; set; }

    [Parameter] public Type TemplateType { get; set; } = Loading.DefaultTemplateType;

    private ITaskStatus CurrentTask { get; set; }

    private LoadingIndicatorTemplateBase _template;

    private RenderFragment _loadingFragment;

    private Action<ITaskStatus> HandleTaskProgressChangedEvent => new Action<ITaskStatus>((ITaskStatus task) =>
    {
        CurrentTask = task;
        if (_template != null)
        {
            _template.CurrentTask = task;

            InvokeAsync(() =>
       {
           _template.CallStateHasChanged();
   //StateHasChanged();
});


        }
        InvokeAsync(() =>
  {
                    StateHasChanged();
                });
    });

    protected override void OnInitialized()
    {
        Loading.SubscribeToTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
        _loadingFragment = new RenderFragment(builder =>
        {
            builder.OpenComponent(0, TemplateType);
            builder.AddComponentReferenceCapture(1, inst =>
            {
                _template = (LoadingIndicatorTemplateBase)inst;
                _template.CurrentTask = CurrentTask;
            });
            builder.CloseComponent();
        });
    }

    public void Dispose()
    {
        Loading.UnsubscribeFromTaskProgressChanged(Context, HandleTaskProgressChangedEvent);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
